package vista;

import conexion.Conexion;
import java.awt.Dimension;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import modelo.DetalleVenta;
import java.util.ArrayList;

/**
 *
 * @author GL753VD
 */
public class InterVenta extends javax.swing.JInternalFrame {
    //modelo de los datos

    private DefaultTableModel modeloDatosProductos;

    //lista para detalle de venta de los productos
    ArrayList<DetalleVenta> listadeproductos = new ArrayList<>();//para almacenar en lista de productos todo lo que vayamos a comprar
    private DetalleVenta producto;

    private int idProducto;
    private String nombre = "";
    private int cantidadproductobd = 0;//
    private double PrecioUnitario = 0.0;

    private int Cantidad = 0;//cantidad de productos a comprar
    private double SubTotal = 0.0;//cantidad por precio
    private double TotalaPagar = 0.0;

    //variables para calculos del todo
    private double SubTotalGeneral = 0.0;
    private double TotalaPagarGeneral = 0.0;

    private int auxIdDetalle = 1; //id de detalle de la venta como auxiliar

    /**
     * Creates new form InterVenta
     */
    public InterVenta() {
        initComponents();

        this.setSize(new Dimension(800, 600));
        this.setTitle("Venta");

        //cargarclientes
        this.CargarComboClientes();
        //cargar productos
        this.CargarComboProductos();
        //cargar tabla productoa
        this.IniciarTablaProducto();

        TextEfectivo.setEnabled(false);
        ButtonCalcularCambio.setEnabled(false);
        //valor por defecto
        TextSubTotal.setText("0.0");
        TextTotalaPagar.setText("0.0");
    }

    //metodo para iniciar tabla de productos
    private void IniciarTablaProducto() {
        modeloDatosProductos = new DefaultTableModel();
        //añadir columnas
        modeloDatosProductos.addColumn("N");
        modeloDatosProductos.addColumn("nombre");
        modeloDatosProductos.addColumn("Cantidad");
        modeloDatosProductos.addColumn("Precio Unitario");
        modeloDatosProductos.addColumn("Sub Total");
        modeloDatosProductos.addColumn("Total a Pagar");
        modeloDatosProductos.addColumn("Accion");
        //agregar datos de modelo a la tabla 
        this.jTableProductos.setModel(modeloDatosProductos);

    }
//metodo para mostrar info de tabla

    private void listaTablaProductos() {
        this.modeloDatosProductos.setRowCount(listadeproductos.size());
        for (int i = 0; i < listadeproductos.size(); i++) {
            this.modeloDatosProductos.setValueAt(i + 1, i, 0);
            this.modeloDatosProductos.setValueAt(listadeproductos.get(i).getNombre(), i, 1);
            this.modeloDatosProductos.setValueAt(listadeproductos.get(i).getCantidad(), i, 2);
            this.modeloDatosProductos.setValueAt(listadeproductos.get(i).getPrecioUnitario(), i, 3);
            this.modeloDatosProductos.setValueAt(listadeproductos.get(i).getSubTotal(), i, 4);
            this.modeloDatosProductos.setValueAt(listadeproductos.get(i).getTotalaPagar(), i, 5);
            this.modeloDatosProductos.setValueAt("Eliminar", i, 6);//agregar boton eliminar

        }
        //añadir TableProductos
        jTableProductos.setModel(modeloDatosProductos);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel6 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        ComboBoxProducto = new javax.swing.JComboBox<>();
        ComboBoxCliente = new javax.swing.JComboBox<>();
        AñadirProducto = new javax.swing.JButton();
        TextCantidad = new javax.swing.JTextField();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableProductos = new javax.swing.JTable();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        TextSubTotal = new javax.swing.JTextField();
        TextTotalaPagar = new javax.swing.JTextField();
        TextEfectivo = new javax.swing.JTextField();
        TextCambio = new javax.swing.JTextField();
        ButtonCalcularCambio = new javax.swing.JButton();
        ButtonRegistrarVenta = new javax.swing.JButton();
        Fondo = new javax.swing.JLabel();

        jLabel6.setText("jLabel6");

        setClosable(true);
        setIconifiable(true);
        setResizable(true);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel1.setText("Venta");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 0, 70, 40));

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel2.setText("Producto:");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 120, 70, 20));

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel3.setText("Cantidad:");
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 120, 70, 20));

        jLabel4.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel4.setText("Cliente:");
        getContentPane().add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 50, 70, 20));

        ComboBoxProducto.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        ComboBoxProducto.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccione producto:", "Item 2", "Item 3", "Item 4" }));
        ComboBoxProducto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ComboBoxProductoActionPerformed(evt);
            }
        });
        getContentPane().add(ComboBoxProducto, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 120, -1, -1));

        ComboBoxCliente.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        ComboBoxCliente.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccione cliente:", "Item 2", "Item 3", "Item 4" }));
        getContentPane().add(ComboBoxCliente, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 50, -1, -1));

        AñadirProducto.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        AñadirProducto.setText("Añadir ");
        AñadirProducto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AñadirProductoActionPerformed(evt);
            }
        });
        getContentPane().add(AñadirProducto, new org.netbeans.lib.awtextra.AbsoluteConstraints(510, 120, -1, -1));

        TextCantidad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TextCantidadActionPerformed(evt);
            }
        });
        getContentPane().add(TextCantidad, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 120, 120, -1));

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jTableProductos.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jTableProductos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jTableProductos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableProductosMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTableProductos);

        jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 760, 180));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 160, 760, -1));

        jLabel7.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel7.setText("Subtotal:");
        getContentPane().add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 360, -1, -1));

        jLabel8.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel8.setText("Total a Pagar:");
        getContentPane().add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 390, -1, -1));

        jLabel9.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel9.setText("Efectivo:");
        getContentPane().add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 430, -1, -1));
        getContentPane().add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 450, -1, -1));

        jLabel11.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel11.setText("Cambio:");
        getContentPane().add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 470, -1, -1));

        TextSubTotal.setEnabled(false);
        getContentPane().add(TextSubTotal, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 360, 80, -1));

        TextTotalaPagar.setEnabled(false);
        TextTotalaPagar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TextTotalaPagarActionPerformed(evt);
            }
        });
        getContentPane().add(TextTotalaPagar, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 390, 100, -1));
        getContentPane().add(TextEfectivo, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 430, 110, -1));

        TextCambio.setEnabled(false);
        TextCambio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TextCambioActionPerformed(evt);
            }
        });
        getContentPane().add(TextCambio, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 470, 120, -1));

        ButtonCalcularCambio.setText("Calcular Cambio");
        ButtonCalcularCambio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonCalcularCambioActionPerformed(evt);
            }
        });
        getContentPane().add(ButtonCalcularCambio, new org.netbeans.lib.awtextra.AbsoluteConstraints(650, 510, -1, -1));

        ButtonRegistrarVenta.setText("Registrar Venta");
        ButtonRegistrarVenta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonRegistrarVentaActionPerformed(evt);
            }
        });
        getContentPane().add(ButtonRegistrarVenta, new org.netbeans.lib.awtextra.AbsoluteConstraints(510, 510, -1, -1));
        getContentPane().add(Fondo, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 0, 790, 570));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void ComboBoxProductoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ComboBoxProductoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ComboBoxProductoActionPerformed

    private void TextCantidadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TextCantidadActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_TextCantidadActionPerformed

    private void TextTotalaPagarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TextTotalaPagarActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_TextTotalaPagarActionPerformed

    private void TextCambioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TextCambioActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_TextCambioActionPerformed

    private void ButtonCalcularCambioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonCalcularCambioActionPerformed
        // TODO add your handling code here:
        if (!TextEfectivo.getText().isEmpty()) {
            //no ingresar datos no numericos
            boolean validacion = validarDouble(TextEfectivo.getText());
            if (validacion == true) {
                //validar efectivo sea mayor a total a pagar, efec= efectivo, toap=total a pagar
                double efect = Double.parseDouble(TextEfectivo.getText().trim());
                double toap = Double.parseDouble(TextTotalaPagar.getText().trim());

                if (efect < toap) {
                    JOptionPane.showMessageDialog(null, "Dinero Insuficiente");

                } else {
                    double cambio = (efect - toap);
                    String camb = String.valueOf(cambio);
                    TextCambio.setText(camb);
                }
            } else {
                JOptionPane.showMessageDialog(null, "Ingrese solo caracteres numericos");

            }

        } else {
            JOptionPane.showMessageDialog(null, "Ingrese efectivo");
        }

    }//GEN-LAST:event_ButtonCalcularCambioActionPerformed

    private void ButtonRegistrarVentaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonRegistrarVentaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ButtonRegistrarVentaActionPerformed

    private void AñadirProductoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AñadirProductoActionPerformed
        // TODO add your handling code here:
        String combo = this.ComboBoxProducto.getSelectedItem().toString();
        //validar que seleccione un producto
        if (combo.equalsIgnoreCase("seleccione producto")) {
            JOptionPane.showMessageDialog(null, "Seleccione producto");
        } else {
            //validar el ingreso de cantidad
            if (!TextCantidad.getText().isEmpty()) {
                //validar que el usuario no ingrese caracteres no numericos
                boolean validacion = validar(TextCantidad.getText());
                if (validacion == true) {
                    //validar que la cantidad sea mayor a cero 
                    if (Integer.parseInt(TextCantidad.getText()) > 0) {
                        Cantidad = Integer.parseInt(TextCantidad.getText());//ingreamos cantidad de productos
                        //EJECUTAR metodo para obtener datos de producto
                        this.DatosdelProducto();
                        //validar que la cantidad de productos no sea mayor a la del Stock de bd.
                        if (Cantidad <= cantidadproductobd) {

                            SubTotal = PrecioUnitario * Cantidad;
                            TotalaPagar = SubTotal;

                            //se crea un nuevo producto
                            producto = new DetalleVenta(auxIdDetalle,
                                    1,
                                    idProducto,
                                    Integer.parseInt(TextCantidad.getText()),
                                    PrecioUnitario,
                                    SubTotal,
                                    TotalaPagar,
                                    nombre
                            );
                            //añadir a la lista
                            listadeproductos.add(producto);
                            JOptionPane.showMessageDialog(null, "Producto Agregado");
                            auxIdDetalle++;
                            TextCantidad.setText("");//limpiar campo
                            //volver a cargar combo de productos
                            this.CargarComboProductos();
                            this.CalcularaPagar();
                            TextEfectivo.setEnabled(true);
                            ButtonCalcularCambio.setEnabled(true);

                        } else {
                            JOptionPane.showMessageDialog(null, "Excede cantidad de productos en Stock");

                        }

                    } else {
                        JOptionPane.showMessageDialog(null, "La cantidad no pude ser menor a cero");

                    }
                } else {
                    JOptionPane.showMessageDialog(null, "Agregue solo caracteres numericos");

                }
            } else {
                JOptionPane.showMessageDialog(null, "Ingresa la cantidad de producto");

            }
        }
        //llamar metodo
        this.listaTablaProductos();


    }//GEN-LAST:event_AñadirProductoActionPerformed
   int idArrayList = 0;
    private void jTableProductosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableProductosMouseClicked
        // TODO add your handling code here:
     int filapoint =  jTableProductos.rowAtPoint(evt.getPoint());
     int columnapoint = 0;//es traer el valor de la columna 0 que es la del id
     
     if(filapoint>-1){
        idArrayList = (int) modeloDatosProductos.getValueAt(filapoint, columnapoint);
     }
     
     int opcion = JOptionPane.showConfirmDialog(null,"¿Eliminar producto?");//para mandar mensaje de confirmacion
       
     //opciones de confirmacion dialogo - si = 0; no = 1; cancel = 2; close = -1
     
     switch (opcion){
         case 0://presione si
           listadeproductos.remove(idArrayList -1);
           this.CalcularaPagar();
           this.listaTablaProductos();
           break;
         case 1 ://presione no
             break;
         default:
             break;
     }
     
     
        
    }//GEN-LAST:event_jTableProductosMouseClicked


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AñadirProducto;
    private javax.swing.JButton ButtonCalcularCambio;
    private javax.swing.JButton ButtonRegistrarVenta;
    private javax.swing.JComboBox<String> ComboBoxCliente;
    private javax.swing.JComboBox<String> ComboBoxProducto;
    private javax.swing.JLabel Fondo;
    private javax.swing.JTextField TextCambio;
    private javax.swing.JTextField TextCantidad;
    private javax.swing.JTextField TextEfectivo;
    private javax.swing.JTextField TextSubTotal;
    private javax.swing.JTextField TextTotalaPagar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    public static javax.swing.JTable jTableProductos;
    // End of variables declaration//GEN-END:variables
//Metodo para cargar clientes
    private void CargarComboClientes() {
        Connection cn = Conexion.conectar();
        String sql = "select * from Cliente";
        Statement st;

        try {

            st = cn.createStatement();
            ResultSet rs = st.executeQuery(sql);
            ComboBoxCliente.removeAllItems();
            ComboBoxCliente.addItem("Seleccione Cliente");
            while (rs.next()) {
                ComboBoxCliente.addItem(rs.getString("nombre") + " " + rs.getString("apellido"));
            }
            cn.close();
        } catch (SQLException e) {
            System.out.println("Error al cargar cliente, !" + e);
        }

    }

//metodo para cargar productos
    private void CargarComboProductos() {
        Connection cn = Conexion.conectar();
        String sql = "select * from Producto";
        Statement st;

        try {

            st = cn.createStatement();
            ResultSet rs = st.executeQuery(sql);
            ComboBoxProducto.removeAllItems();
            ComboBoxProducto.addItem("Seleccione Producto");
            while (rs.next()) {
                ComboBoxProducto.addItem(rs.getString("nombre"));
            }
            cn.close();
        } catch (SQLException e) {
            System.out.println("Error al cargar producto, !" + e);
        }

    }
    //METODO PARA VALIDAR QUE EL USUARIO NO INGRESE CARACTERES NO NUMERICOS

    private boolean validar(String valor) {
        try {
            int num = Integer.parseInt(valor);
            return true;
        } catch (NumberFormatException e) {
            return false;
        }

    }

    private boolean validarDouble(String valor) {
        try {
            Double num = Double.parseDouble(valor);
            return true;
        } catch (NumberFormatException e) {
            return false;
        }

    }

    //Metodo para mostrar datos de producto
    private void DatosdelProducto() {
        try {
            String sql = "select * from Producto where nombre ='" + this.ComboBoxProducto.getSelectedItem() + "'";
            Connection cn = Conexion.conectar();
            Statement st;
            st = cn.createStatement();
            ResultSet rs = st.executeQuery(sql);
            while (rs.next()) {
                idProducto = rs.getInt("idProducto");
                nombre = rs.getString("nombre");
                cantidadproductobd = rs.getInt("Cantidad");
                PrecioUnitario = rs.getDouble("Precio");
            }

        } catch (SQLException e) {
            System.out.println("Error para obtener datos del producto " + e);
        }
    }
//metodo para calcular cuanto se pagara de los productos seleccionados

    private void CalcularaPagar() {
        SubTotalGeneral = 0;
        TotalaPagarGeneral = 0;

        for (DetalleVenta elemento : listadeproductos) {
            SubTotalGeneral += elemento.getSubTotal();
            TotalaPagarGeneral += elemento.getTotalaPagar();

        }
        //enviar datos al design
        TextSubTotal.setText(String.valueOf(SubTotalGeneral));
        TextTotalaPagar.setText(String.valueOf(TotalaPagarGeneral));

    }

}
