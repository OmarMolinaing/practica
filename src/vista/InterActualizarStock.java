package vista;

import conexion.Conexion;
import controlador.Ctrl_Producto;
import java.awt.Dimension;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import javax.swing.JOptionPane;
import javax.swing.plaf.metal.MetalBorders;
import modelo.Producto;

/**
 *
 * @author GL753VD
 */
public class InterActualizarStock extends javax.swing.JInternalFrame {

    /**
     * Creates new form InterActualizarStock
     */
    //Variables
    int idProducto = 0;
    int Cantidad = 0;

    public InterActualizarStock() {
        initComponents();
        setTitle("Actualizar stock de productos");
        setSize(400, 300);
        this.CargarComboProductos();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        TextActual = new javax.swing.JTextField();
        TextNuevo = new javax.swing.JTextField();
        ComboBoxProducto = new javax.swing.JComboBox<>();
        jButton1 = new javax.swing.JButton();
        Fondo = new javax.swing.JLabel();

        setClosable(true);
        setIconifiable(true);
        setResizable(true);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Actualizar Stock de Productos");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 20, -1, -1));

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Producto");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 80, 70, 30));

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Stock Actual");
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 120, 90, 30));

        jLabel4.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("Stock Nuevo");
        getContentPane().add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 170, 100, 30));

        TextActual.setEnabled(false);
        TextActual.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TextActualActionPerformed(evt);
            }
        });
        getContentPane().add(TextActual, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 120, 110, -1));
        getContentPane().add(TextNuevo, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 170, 110, -1));

        ComboBoxProducto.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        ComboBoxProducto.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccione Producto", "Item 2", "Item 3", "Item 4" }));
        ComboBoxProducto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ComboBoxProductoActionPerformed(evt);
            }
        });
        getContentPane().add(ComboBoxProducto, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 80, -1, -1));

        jButton1.setBackground(new java.awt.Color(153, 255, 153));
        jButton1.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jButton1.setText("Actualizar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 210, 130, 40));

        Fondo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/PIXELS.jpg"))); // NOI18N
        getContentPane().add(Fondo, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 590, 390));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void TextActualActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TextActualActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_TextActualActionPerformed

    private void ComboBoxProductoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ComboBoxProductoActionPerformed
        // TODO add your handling code here:
        this.MostrarStock();//llamamos el metodo mostrar stock
    }//GEN-LAST:event_ComboBoxProductoActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        //validamos seleccion nde producto
        if (!ComboBoxProducto.getSelectedItem().equals("Seleccione Producto")) {
            //Validamos campos vacios
            if (!TextNuevo.getText().isEmpty()) {
                //validamos que el usuario no ingrese otro caracteres numericos
                boolean validacion = validar(TextNuevo.getText().trim());

                if (validacion == true) {
                    //validar que la cantidad sea mayor a cero (0)
                    if (Integer.parseInt(TextNuevo.getText()) > 0) {

                        Producto producto = new Producto();
                        Ctrl_Producto controlProducto = new Ctrl_Producto();
                        int stockActual = Integer.parseInt(TextActual.getText().trim());
                        int stockNuevo = Integer.parseInt(TextNuevo.getText().trim());

                        stockNuevo = stockActual + stockNuevo;
                        producto.setCantidad(stockNuevo);
                        if (controlProducto.actualizarStock(producto, idProducto)) {
                            JOptionPane.showMessageDialog(null, "Stock Actualizado");
                            ComboBoxProducto.setSelectedItem("Seleccione producto");
                            TextActual.setText("");
                            TextNuevo.setText("");
                            this.CargarComboProductos();
                        } else {
                            JOptionPane.showMessageDialog(null, "Error al actualizar");

                        }

                    } else {
                        JOptionPane.showMessageDialog(null, "La cantidad no puede ser cero ni negativa");

                    }

                } else {
                    JOptionPane.showMessageDialog(null, "NO SE ADMITEN CARACTERES NO NUMERICOS");

                }

            } else {
                JOptionPane.showMessageDialog(null, "Ingrese cantidad a agregar a stock");

            }

        } else {
            JOptionPane.showMessageDialog(null, "Seleccione un Producto");
        }
    }//GEN-LAST:event_jButton1ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> ComboBoxProducto;
    private javax.swing.JLabel Fondo;
    private javax.swing.JTextField TextActual;
    private javax.swing.JTextField TextNuevo;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    // End of variables declaration//GEN-END:variables
//Metodo cargar Productos
    private void CargarComboProductos() {
        Connection cn = Conexion.conectar();
        String sql = "select * from Producto";
        Statement st;
        try {
            st = cn.createStatement();
            ResultSet rs = st.executeQuery(sql);
            ComboBoxProducto.removeAllItems();
            ComboBoxProducto.addItem("Seleccione Producto");
            while (rs.next()) {
                ComboBoxProducto.addItem(rs.getString("nombre"));
            }
        } catch (SQLException e) {
            System.out.println("Error al cargar Productos en: " + e);
        }
    }
    // metodo para mostrar stcok de producto seleccionado

    private void MostrarStock() {
        try {
            Connection cn = Conexion.conectar();
            String sql = "select * from Producto where nombre = '" + this.ComboBoxProducto.getSelectedItem() + "'";
            Statement st;
            st = cn.createStatement();
            ResultSet rs = st.executeQuery(sql);

            if (rs.next()) {
                idProducto = rs.getInt("idProducto");
                Cantidad = rs.getInt("Cantidad");
                TextActual.setText(String.valueOf(Cantidad));//para que se quitara el error de tipo entero a string

            } else {
                TextActual.setText("");
            }

        } catch (SQLException e) {
            System.out.println("Error al obtener stock de productos " + e);
        }

    }

    //metodo de validacion de caracteres no numericos
    private boolean validar(String valor) {
        int num;
        try {
            num = Integer.parseInt(valor);//almacenamos valor
            return true;

        } catch (NumberFormatException e) {//aqui arroja el caracter no numerico
            return false;
        }
    }

}
